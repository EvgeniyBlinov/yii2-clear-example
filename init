#!/usr/bin/env php
<?php
/**
 * Yii Application Initialization Tool
 *
 * In order to run in non-interactive mode:
 *
 * init --env=Development --overwrite=n
 *
 * @author Alexander Makarov <sam@rmcreative.ru>
 *
 * @link http://www.yiiframework.com/
 * @copyright Copyright (c) 2008 Yii Software LLC
 * @license http://www.yiiframework.com/license/
 */

if (!extension_loaded('openssl')) {
    die('The OpenSSL PHP extension is required by Yii2.');
}


$params   = getParams();
$root     = str_replace('\\', '/', __DIR__);
$envs     = require("$root/environments/index.php");
$envNames = array_keys($envs);
$availableParams = [
    'backup' => 'save current environment before all operations',
    'status' => 'show current environment',
    'help' => 'show usage manual',
    'all'  => 'overwrite all configs',
    'env'  => $envs,
];

if (isset($params['help'])) {
    help(0, $availableParams);
}


includeConstants("$root/frontend/web/index.php");

if (isset($params['backup'])) {
    if (defined('YII_ENV')) {
        saveEnv($root, YII_ENV);
    }
}
if (isset($params['status'])) {
    if (defined('YII_ENV')) {
        echo YII_ENV, "\n";
        exit(0);
    } else {
        echo "Undefined environment!\n";
        exit(1);
    }
}
echo "Yii Application Initialization Tool v1.0\n\n";

$envName = null;
if (empty($params['env']) || $params['env'] === '1') {
    echo "Which environment do you want the application to be initialized in?\n\n";
    foreach ($envNames as $i => $name) {
        echo "  [$i] $name\n";
    }
    echo "\n  Your choice [0-" . (count($envs) - 1) . ', or "q" to quit] ';
    $answer = trim(fgets(STDIN));

    if (!ctype_digit($answer) || !in_array($answer, range(0, count($envs) - 1))) {
        echo "\n  Quit initialization.\n";
        exit(0);
    }

    if (isset($envNames[$answer])) {
        $envName = $envNames[$answer];
    }
} else {
    $envName = $params['env'];
}

if (!in_array($envName, $envNames)) {
    $envsList = implode(', ', $envNames);
    echo "\n  $envName is not a valid environment. Try one of the following: $envsList. \n";
    exit(2);
}

$env = $envs[$envName];

if (empty($params['env'])) {
    echo "\n  Initialize the application under '{$envNames[$answer]}' environment? [yes|no] ";
    $answer = trim(fgets(STDIN));
    if (strncasecmp($answer, 'y', 1)) {
        echo "\n  Quit initialization.\n";
        exit(0);
    }
}

echo "\n  Start initialization '$envName' environment...\n\n";
$files = getFileList("$root/environments/{$env['path']}");
$all = !empty($params['all']);
foreach ($files as $file) {
    if (!copyFile($root, "environments/{$env['path']}/$file", $file, $all, $params)) {
        break;
    }
}

$callbacks = ['setCookieValidationKey', 'setWritable', 'setExecutable'];
foreach ($callbacks as $callback) {
    if (!empty($env[$callback])) {
        $callback($root, $env[$callback]);
    }
}

if (!isset($params['backup'])) {
    saveEnv($root, $envName);
}

echo "\n  ... initialization completed.\n\n";

function getFileList($root, $basePath = '')
{
    $files = [];
    $handle = opendir($root);
    while (($path = readdir($handle)) !== false) {
        if ($path === '.svn' || $path === '.' || $path === '..') {
            continue;
        }
        $fullPath = "$root/$path";
        $relativePath = $basePath === '' ? $path : "$basePath/$path";
        if (is_dir($fullPath)) {
            $files = array_merge($files, getFileList($fullPath, $relativePath));
        } else {
            $files[] = $relativePath;
        }
    }
    closedir($handle);
    return $files;
}

function copyFile($root, $source, $target, &$all, $params)
{
    if (!is_file($root . '/' . $source)) {
        echo "       skip $target ($source not exist)\n";
        return true;
    }
    if (is_file($root . '/' . $target)) {
        if (file_get_contents($root . '/' . $source) === file_get_contents($root . '/' . $target)) {
            echo "  unchanged $target\n";
            return true;
        }
        if ($all) {
            echo "  overwrite $target\n";
        } else {
            echo "      exist $target\n";
            echo "            ...overwrite? [Yes|No|All|Quit] ";


            $answer = !empty($params['overwrite']) ? $params['overwrite'] : trim(fgets(STDIN));
            if (!strncasecmp($answer, 'q', 1)) {
                return false;
            } else {
                if (!strncasecmp($answer, 'y', 1)) {
                    echo "  overwrite $target\n";
                } else {
                    if (!strncasecmp($answer, 'a', 1)) {
                        echo "  overwrite $target\n";
                        $all = true;
                    } else {
                        echo "       skip $target\n";
                        return true;
                    }
                }
            }
        }
        file_put_contents($root . '/' . $target, file_get_contents($root . '/' . $source));
        return true;
    }
    echo "   generate $target\n";
    @mkdir(dirname($root . '/' . $target), 0777, true);
    file_put_contents($root . '/' . $target, file_get_contents($root . '/' . $source));
    return true;
}

function getParams()
{
    $rawParams = [];
    if (isset($_SERVER['argv'])) {
        $rawParams = $_SERVER['argv'];
        array_shift($rawParams);
    }

    $params = [];
    foreach ($rawParams as $param) {
        if (preg_match('/^--(\w+)(=(.*))?$/', $param, $matches)) {
            $name = $matches[1];
            $params[$name] = isset($matches[3]) ? $matches[3] : true;
        } else {
            $params[] = $param;
        }
    }
    return $params;
}

function setWritable($root, $paths)
{
    foreach ($paths as $writable) {
        echo "      chmod 0777 $writable\n";
        @chmod("$root/$writable", 0777);
    }
}

function setExecutable($root, $paths)
{
    foreach ($paths as $executable) {
        echo "      chmod 0755 $executable\n";
        @chmod("$root/$executable", 0755);
    }
}

function setCookieValidationKey($root, $paths)
{
    foreach ($paths as $file) {
        echo "   generate cookie validation key in $file\n";
        $file = $root . '/' . $file;
        $length = 32;
        $bytes = openssl_random_pseudo_bytes($length);
        $key = strtr(substr(base64_encode($bytes), 0, $length), '+/=', '_-.');
        $content = preg_replace('/(("|\')cookieValidationKey("|\')\s*=>\s*)(""|\'\')/', "\\1'$key'", file_get_contents($file));
        file_put_contents($file, $content);
    }
}

function createSymlink($links)
{
    foreach ($links as $link => $target) {
        echo "    symlink $target as $link\n";
        if (!is_link($link)) {
            symlink($target, $link);
        }
    }
}

function help($status, $availableParams)
{
    echo <<<EOF
    Usage: /usr/bin/env php ./init
\n
EOF;
    foreach ($availableParams as $param => $options) {
        if (is_string($options)) {
            echo "    --$param   $options\n";
        } else {
            echo "    --$param   [PARAMETER]\n";
            echo "    $param [PARAMETERS]:\n";
            foreach ($options as $name => $settings) {
                $desc = !empty($settings['description']) ? ' : ' . $settings['description'] : '';
                echo "        $name $desc\n";
            }
        }
    }
    echo "\n";
    exit($status);
}

/**
 * Include constants
 *
 * @param string $path of php file
 * @return void
 * @author Evgeniy Blinov <evgeniy_blinov@mail.ru>
 **/
function includeConstants($path)
{
    if (file_exists($path)) {
        $constats = [];
        $fh = fopen($path, 'r') or die("Config file not found!");
        while (!feof($fh)) {
            $line = fgets($fh, 4096);
            if (preg_match('~^.*define.*$$~', $line)) {
                $constats[ ] = $line;
            }
        }
        fclose($fh);

        eval(implode("\n", $constats));
    } else {
        echo "File $path not found!\nTry to run ./init without arguments!\n";
    }
}

/**
 * Save environment
 *
 * @param string $root
 * @param string $env
 * @return void
 * @author Evgeniy Blinov <evgeniy_blinov@mail.ru>
 **/
function saveEnv($root, $env)
{
    echo "\n  Save current environment '$env'...\n\n";
    $fh = fopen("$root/environment", 'w') or die("Check permissions for $root/environment !");
    fwrite($fh, $env);
    fclose($fh);
}
